import{_ as s,c as a,o as n,e as l}from"./app.a2c63123.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"程序计数寄存器Program Counter Register","slug":"程序计数寄存器program-counter-register","link":"#程序计数寄存器program-counter-register","children":[]},{"level":2,"title":"虚拟机栈-Java Stacks","slug":"虚拟机栈-java-stacks","link":"#虚拟机栈-java-stacks","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"栈大小的设置","slug":"栈大小的设置","link":"#栈大小的设置","children":[]},{"level":3,"title":"栈帧运行","slug":"栈帧运行","link":"#栈帧运行","children":[]},{"level":3,"title":"栈帧结构","slug":"栈帧结构","link":"#栈帧结构","children":[]}]}],"relativePath":"serverSide/运行时数据区.md"}'),p={name:"serverSide/运行时数据区.md"},o=l(`<p><img src="https://pic.imgdb.cn/item/63e752fc4757feff33748b2a.png" alt="788bf570554dacf73256e6232d27064.png"> 方法区与堆是所有线程共享的，计数器和本地方法栈还有虚拟机栈是每个线程都有一份</p><blockquote><p>详细图↓<img src="https://pic.imgdb.cn/item/63e752fc4757feff33748b4d.png" alt="816c47720197ad5503bf8e8af4af8bf.png"> JIT编译产物指代码缓存的位置</p></blockquote><h2 id="程序计数寄存器program-counter-register" tabindex="-1">程序计数寄存器Program Counter Register <a class="header-anchor" href="#程序计数寄存器program-counter-register" aria-hidden="true">#</a></h2><p>JVM中的程序计数寄存器 (Program Counter Register)中，Register 的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。 CPU只有把数据装载到寄存器才能够运行（存放下一条执行指令的地址） 这里，并非是广义上所指的物理寄存器，或许将其翻译为PC计数器(或指令计数器) 会更加贴切(也称为程序钩子)，并且也不容易引起一些不必要的误会JVM中的PC寄存器是对物理PC奇存器的一种抽象模拟。</p><h2 id="虚拟机栈-java-stacks" tabindex="-1">虚拟机栈-Java Stacks <a class="header-anchor" href="#虚拟机栈-java-stacks" aria-hidden="true">#</a></h2><p>java虚拟机栈是线程私有的，其生命周期和线程相同。虚拟机栈描述的是java方法执行的线程内存模型，每个方法被执行，都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、参与方法的调用与返回等。每一个方法被调用到执行完成的过程，就对应着一个栈帧在虚拟机栈中出入栈到出栈的过程（每个方法都对应一个栈帧）</p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h3><pre><code>    栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器
    JVM对于栈的操作只有两个
            每个方法执行，伴随着入栈
            每个方法执行结束后的出栈
    对于栈来说不存在垃圾回收问题，会存在OOM内存溢出问题，先进后出
</code></pre><p><img src="https://pic.imgdb.cn/item/63e752fc4757feff33748b5e.png" alt=""></p><h3 id="栈大小的设置" tabindex="-1">栈大小的设置 <a class="header-anchor" href="#栈大小的设置" aria-hidden="true">#</a></h3><p>使用-Xss设置大小</p><h3 id="栈帧运行" tabindex="-1">栈帧运行 <a class="header-anchor" href="#栈帧运行" aria-hidden="true">#</a></h3><p>在一条活动线程中，一个时间点上，只有一个活动的栈帧，即当前栈帧，这个栈帧对应的方法就是当前方法(方法和栈帧是一一对应关系)，这个方法所在的类就是当前类 不同的线程中所包含的栈帧是不允许相互引用的，即不可以在一个栈帧中引用另外一个线程的栈帧。 如果当前方法调用了其他方法，方法返回的时候，当前栈帧会传回此方法的执行结果给前一个栈帧，接着虚拟机会抛弃当前栈帧，使得前一个栈帧重新成为当前栈帧 Java方法有两种返回函数的方式，一种是正常的函数返回，使用return指令；另外一种是抛出异常(未处理)。不管哪一种都会导致当前栈帧的弹出。<img src="https://pic.imgdb.cn/item/63e752fd4757feff33748bbe.png" alt=""></p><h3 id="栈帧结构" tabindex="-1">栈帧结构 <a class="header-anchor" href="#栈帧结构" aria-hidden="true">#</a></h3><p>局部变量表(Local Variables)，方法返回地址(Return Address)，操作数栈(Operand Stack)，动态链接(Dynamic Linking)，附加信息 <img src="https://cdn.nlark.com/yuque/0/2023/png/25955198/1675496864018-4b978baa-f596-4a94-b743-0675c37a757e.png#averageHue=%23e8f1e9&amp;clientId=u7a2ef259-3da7-4&amp;from=drop&amp;id=ubcd1a091&amp;name=a8a1963b90d033a44903b3e93e26353.png&amp;originHeight=248&amp;originWidth=402&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=43688&amp;status=done&amp;style=none&amp;taskId=ubbb7bff7-9b4e-4d0f-af41-c54b9a46af6&amp;title=" alt="a8a1963b90d033a44903b3e93e26353.png"></p><h4 id="局部变量表" tabindex="-1">局部变量表 <a class="header-anchor" href="#局部变量表" aria-hidden="true">#</a></h4><p>也被称之为局部变量数组或本地变量表 定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量.这些数据类型包括各类基本数据类型、对象引用 (reference)，以及returnAddress类型。 由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题 局部变量表所需的容量大小是在编译期确定下来的，并保存在方法的Code性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的。</p><h5 id="slot" tabindex="-1">Slot <a class="header-anchor" href="#slot" aria-hidden="true">#</a></h5><p>JVM会为局部变量表中的每一个slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值 当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个slot上 注意：1.如果需要访与局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可。(比如: 访问long或double类型变量)即：占用两个插槽的位置访问只需要访问第一个位置就可以 <img src="https://pic.imgdb.cn/item/63e7538d4757feff3375d19f.png" alt="388a38ef6189cafb71d88ae009cdc25.png"> 2.如果当前帧是由构造方法或者实例方法创建的那么该对象引用this将会存放在index为0的slot处，其余的参数按照参数表顺序继续排列。</p><h5 id="slot的复用" tabindex="-1">slot的复用 <a class="header-anchor" href="#slot的复用" aria-hidden="true">#</a></h5><p>栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。 <img src="https://pic.imgdb.cn/item/63e753a24757feff3375f7be.png" alt="b0434ec1dce1afbc1f27ff23e5101f9.png"></p><h5 id="是否可以使用this问题" tabindex="-1">是否可以使用this问题 <a class="header-anchor" href="#是否可以使用this问题" aria-hidden="true">#</a></h5><p>如果当前帧是由构造方法或者实例方法创建的那么该对象引用this将会存放在index为0的slot处，其余的参数按照参数表顺序继续排列。 类方法有this↓ <img src="https://pic.imgdb.cn/item/63e753a24757feff3375f7ec.png" alt="6f32595aab5b459876c8010ef52e1cb.png"> 静态方法无this↓ <img src="https://pic.imgdb.cn/item/63e753a24757feff3375f807.png" alt="1bc1ec4046856d815b5049a8d245b86.png"></p><h5 id="变量的分类" tabindex="-1">变量的分类 <a class="header-anchor" href="#变量的分类" aria-hidden="true">#</a></h5><p>按类型分：①基本数据类型 ②引用数据类型 按声明位置分：①成员变量： 1.类变量： linking的prepare阶段会赋予默认初始值-&gt;initial阶段会赋予显示声明的值 2.实例变量 随对象的创建，会在堆空间中分配实例变量空间，并进行默认初始化 ②局部变量：在使用前必须显示赋值，否则编译报错</p><h4 id="操作数栈" tabindex="-1">操作数栈 <a class="header-anchor" href="#操作数栈" aria-hidden="true">#</a></h4><p>操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。 操作数栈可理解为java虚拟机栈中的一个用于计算的临时数据存储区。 操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的。 每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的Code属性中，为max_stack的值。 栈中的任何一个元素都是可以任意的Java数据类型</p><blockquote><p>32bit的类型占用一个栈单位深度 64bit的类型占用两个栈单位深度操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈 (push)和出栈 (pop) 操作来完成一次数据访问。</p></blockquote><h4 id="操作数栈和变量表的交互案例" tabindex="-1">操作数栈和变量表的交互案例 <a class="header-anchor" href="#操作数栈和变量表的交互案例" aria-hidden="true">#</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Hello</span><span style="color:#A6ACCD;"> hello </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Hello</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> testVal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> hello</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//int类型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">//验证直接相加在编译阶段已合并完结果</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">//探究变量与常量的相加过程</span></span>
<span class="line"><span style="color:#A6ACCD;">        b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;font-style:italic;">//验证int不在-1~5，在-128~127范围的指令是bipush</span></span>
<span class="line"><span style="color:#A6ACCD;">        b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">//验证int不在-128~127，在-32768~32767范围的指令是sipush</span></span>
<span class="line"><span style="color:#A6ACCD;">        b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32768</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">//验证int不在-32768~32767，在-2147483648~2147483647范围的指令是ldc(ldc：从常量池取并压栈，所以这个范围的int是存在常量池)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//short                  //验证byte、short、char在操作数栈压栈前均会转为int</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">short</span><span style="color:#A6ACCD;"> a_s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">short</span><span style="color:#A6ACCD;"> b_s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">short</span><span style="color:#89DDFF;">)(</span><span style="color:#A6ACCD;">a_s </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//float类型            //以下验证float、double、String均是从常量池中取出(均使用了ldc、ldc_w、ldc2_w其中一个)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> a_f </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5.00F</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10.00F</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> b_f </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a_f </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.00F</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//double类型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> a_d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5.00D</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10.00D</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> b_d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a_d </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.00D</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//String类型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> a_str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> b_str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a_str </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>首先这个会保存在方法的Code 属性中，javac Hello.java编译，然后javap -verbose Hello.class反编译分析test()方法如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    Code</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> locals</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args_size</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> bipush        </span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//1 15压入操作数的栈顶(编译过程中5+10合并成15，并且由于15在-128-127范围，即用bipush)  压栈</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> istore_1           </span><span style="color:#676E95;font-style:italic;">//2  从栈顶弹出并压入局部变量表访问索引为1的Slot                                                                    弹栈入局部变量表</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iload_1            </span><span style="color:#676E95;font-style:italic;">//3  将局部变量表中访问索引为1的Slot重新压入栈顶                                                                    局部变量表入栈</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iconst_3          </span><span style="color:#676E95;font-style:italic;">//4  数值3压入操作数的栈顶(范围-1~5，即用指令iconst)                                                              压栈</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iadd                </span><span style="color:#676E95;font-style:italic;">//5  将栈顶的前两个弹出并进行加法运算后将结果重新压入栈顶                                                     前两弹栈相加</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> istore_2          </span><span style="color:#676E95;font-style:italic;">//6   从栈顶弹出并压入局部变量表访问索引为2的Slot                                                                    弹栈入局部变量表</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iload_2            </span><span style="color:#676E95;font-style:italic;">//7  将局部变量表中访问索引为2的Slot重新压入栈顶                                                                    局部变量表入栈</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> bipush        </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//8  6压入操作数的栈顶(在-128-127范围，用bipush指令) </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iadd</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> istore_2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iload_2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> sipush     </span><span style="color:#F78C6C;">128</span><span style="color:#676E95;font-style:italic;">//9  128压入操作数的栈顶(在-32768~32767范围，用sipush指令) </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iadd</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">17</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> istore_2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iload_2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> ldc           #</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// int 32768  //10  128压入操作数的栈顶(在-2147483648~2147483647范围，用ldc指令) </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">21</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iadd</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> istore_2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">23</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> bipush        </span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//11  验证了short、byte、char压栈前都会转为int</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> istore_3</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">26</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iload_3</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">27</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iconst_3</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">28</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iadd</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">29</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> i2s</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> istore        </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> ldc           #</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// float 15.0f //12  以下验证float、double、String均是从常量池中取出(均使用了ldc、ldc_w、ldc2_w其中一个)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">34</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> fstore        </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> fload         </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">38</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> ldc           #</span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// float 3.0f</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> fadd</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">41</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> fstore        </span><span style="color:#F78C6C;">6</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">43</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> ldc2_w        #</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// double 15.0d</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">46</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> dstore        </span><span style="color:#F78C6C;">7</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">48</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> dload         </span><span style="color:#F78C6C;">7</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> ldc2_w        #</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// double 3.0d</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">53</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> dadd</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">54</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> dstore        </span><span style="color:#F78C6C;">9</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">56</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> ldc           #</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// String ab</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">58</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> astore        </span><span style="color:#F78C6C;">11</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">60</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;">           #13                 </span><span style="color:#676E95;font-style:italic;">// class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#A6ACCD;">        63</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> dup</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokespecial #</span><span style="color:#F78C6C;">14</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">67</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> aload         </span><span style="color:#F78C6C;">11</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">69</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokevirtual #</span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">72</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> ldc           #</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// String c</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">74</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokevirtual #</span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">77</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokevirtual #</span><span style="color:#F78C6C;">17</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">80</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> astore        </span><span style="color:#F78C6C;">12</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">82</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iload_2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">83</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> ireturn                        </span><span style="color:#676E95;font-style:italic;">//13  返回结果</span></span>
<span class="line"></span></code></pre></div><p>案例来源：<a href="http://t.csdn.cn/Pdnzl" target="_blank" rel="noreferrer">http://t.csdn.cn/Pdnzl</a></p><h4 id="动态链接" tabindex="-1">动态链接 <a class="header-anchor" href="#动态链接" aria-hidden="true">#</a></h4><p>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接(Dynamic Linking)。比如: invokedynamic指令 在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用 (symbolic Reference) 保存在class文件的常量池里比如:描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用。(#数字 ，是符号引用)</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DynamicLinking</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">method1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">method2</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">method2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><img src="https://pic.imgdb.cn/item/63e753a24757feff3375f818.png" alt="68741856.png"><img src="https://pic.imgdb.cn/item/63e753cb4757feff33764e45.png" alt="197e06f8972db96577e37ac15770f87.png"></p><h4 id="重载和重写的底层原理" tabindex="-1">重载和重写的底层原理 <a class="header-anchor" href="#重载和重写的底层原理" aria-hidden="true">#</a></h4><ul><li>重载overload：同一个类的多个方法，方法名相同，方法入参不同。——静态分派</li><li>重写overrite：父和子之间，子类重写父类的方法。——动态分派</li></ul><p>java虚拟机中提供了5条方法调用字节码：</p><ul><li>invokestatic：调用静态方法</li><li>invokespecial：调用实例构造器方法、私有方法、父类方法</li><li>invokevirtual：调用所有的虚方法</li><li>invokeinterface：调用接口方法，会在运行时再确定一个实现此接口的对象</li><li>invokedynamic：先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法。上面四条调用指令，分派逻辑固化在虚拟机内部，而invokedynamic的分派逻辑由用户设定的引导方法决定。</li></ul><p>只要能被invokestatic和invokespecial调用的方法，都可以在<strong>解析阶段</strong>唯一确定一个调用版本，符合这个条件的有静态方法、构造方法、私有方法、父类方法4类，它们在类加载的解析阶段把方法的符号引用解析成直接应用。这些方法被称为<strong>非虚方法</strong>。其他方法都称为虚方法。（final方法除外，final方法的字节码指令是invokevirtual，但是也在类加载时解析成直接引用，因为不能被重写）。 解析调用是静态的过程，在编译器就完全确定。而分派调用则可能是静态的也可能是动态的，根据分派的宗量分为单分派和多分派。 Human man = new Man(); 复制代码</p><h5 id="静态分派" tabindex="-1">静态分派 <a class="header-anchor" href="#静态分派" aria-hidden="true">#</a></h5><p>依赖静态类型来定位方法执行版本的分派动作叫静态分派。 <img src="https://pic.imgdb.cn/item/63e754114757feff3376e67d.webp" alt=""> 这行代码中，Human叫做变量的静态类型，Man叫做变量的实际类型。静态类型和实际类型都可以发生变化，实际类型的变化在运行期间得知，静态类型的变化在编译时可知。 <strong>在编译阶段，java编译器是根据变量的静态类型决定使用哪个重载版本</strong>。上面的例子中，man和woman的静态类型都是Human，所以编译器都使用的是sayHello(Human )方法。</p><h5 id="动态分派" tabindex="-1">动态分派 <a class="header-anchor" href="#动态分派" aria-hidden="true">#</a></h5><h5 id="在运行期-根据实际类型确定方法执行版本的分派过程叫动态分派。" tabindex="-1">在运行期，根据实际类型确定方法执行版本的分派过程叫动态分派。 <a class="header-anchor" href="#在运行期-根据实际类型确定方法执行版本的分派过程叫动态分派。" aria-hidden="true">#</a></h5><h5 id="" tabindex="-1"><img src="https://pic.imgdb.cn/item/63e753e04757feff3376810a.webp" alt=""> <a class="header-anchor" href="#" aria-hidden="true">#</a></h5><h5 id="动态分派的执行过程" tabindex="-1">动态分派的执行过程 <a class="header-anchor" href="#动态分派的执行过程" aria-hidden="true">#</a></h5><p>（1）<strong>找到操作数栈顶的第一个元素所指向的对象的实际类型</strong>，记作C。 （2）如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果成功则返回该方法的直接饮用，查找过程结束；如果不通过，返回java.lang.IllegalAccessError。 （3）否则，按照继承关系从下往上依次对C的各个父类进行（2）的搜索和验证过程。 （4）如果始终没有找到，则抛出java.lang.AbstractMethodError异常。 上面的例子中，man一开始的实际类型是Man，使用动态分派，找到的方法版本是Man的sayHello。</p><h5 id="单分派和多分派" tabindex="-1">单分派和多分派 <a class="header-anchor" href="#单分派和多分派" aria-hidden="true">#</a></h5><p>方法的接收者和方法的参数统称为方法的宗量。 <img src="https://pic.imgdb.cn/item/63e753f04757feff3376a4a9.webp" alt=""> 上面的例子中，father的静态类型是Father，实际类型是Father；son的静态类型是Father，实际类型是Son。在编译阶段静态分派的过程，选择方法版本时，需要考虑方法的接收者和方法的入参，属于静态多分派。分派结果是产生了两条invokevirtual字节码指令，指向的方法版本分别是常量池中的Father.hardChoice(360)和Father.hardChoice(QQ)。 然后是运行期java虚拟机的选择，也就是动态分派的过程，此时在执行invokevirtual的Father.hardChoice(QQ)指令时，已经确定了方法入参的签名必须是QQ，此时唯一可以影响选择的只有方法的接收者，所以是动态单分派。此时son的实际类型是Son，所以选择的结果是Son.hardChoice(QQ)方法。</p><p>重载和重写原理内容来自<a href="https://juejin.cn/post/7010404073274884127" target="_blank" rel="noreferrer">https://juejin.cn/post/7010404073274884127</a></p><h4 id="虚方法表" tabindex="-1">虚方法表 <a class="header-anchor" href="#虚方法表" aria-hidden="true">#</a></h4><h5 id="每个类都有虚方法表" tabindex="-1">每个类都有虚方法表 <a class="header-anchor" href="#每个类都有虚方法表" aria-hidden="true">#</a></h5><ul><li><strong>针对于方法调用动态分派的过程</strong>，虚拟机会在类的方法区建立一个<strong>虚方法表</strong>的数据结构(virtual method table，简称vtable)。</li><li>针对于invokeinterface指令来说，虚拟机会建立一个叫做接口方法表的数据结构(interface method table，简称itable)。</li></ul><h5 id="虚方法表的作用" tabindex="-1">虚方法表的作用 <a class="header-anchor" href="#虚方法表的作用" aria-hidden="true">#</a></h5><ul><li>在动态分派过程中，有一个步骤是查找对应实际类型的对应方法，为了快速查找的目的，而引入的虚方法表。</li><li>在操作数栈中找到对应对象后回去虚方法表查找真正被调用的方法。</li><li>在虚方法表中查找方法有些注意点。 <ul><li>如果子类没有重写父类方法，就会去父类的虚方法表中查找，对应方法，节省了空间。</li><li>对于顶层父类Object也是，如果没有重写，就会去Object中查找对应方法。</li><li>子类的重写的方法和父类中的方法在字节码层面方法索引一般来说是一样的，如果在子类找到方法test(),其索引是5，发现不是要调用的方法，而是要调用父类的test(),就会直接去父类方法索引为5的地方查找。（提升了查找效率）</li></ul></li><li><strong>虚方法表是在类加载阶段中的连接阶段进行的</strong>。 链接：<a href="https://juejin.cn/post/7004281096074428423" target="_blank" rel="noreferrer">https://juejin.cn/post/7004281096074428423</a></li></ul><p><img src="https://pic.imgdb.cn/item/63e754014757feff3376c56b.png" alt=""></p><h4 id="方法返回地址" tabindex="-1">方法返回地址 <a class="header-anchor" href="#方法返回地址" aria-hidden="true">#</a></h4><p>存放调用该方法的pc寄存器的值。 一个方法的结束，有两种方式。 1.正常执行完成 2.出现未处理异常，绯正常退出 无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。 方法正常退出时，调用者的pc计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。</p>`,60),e=[o];function t(c,r,i,C,y,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
