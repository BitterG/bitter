import{_ as t,c as a,o as r,a as e,b as c}from"./app.a2c63123.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"serverSide/AQS-AbstraactQueuedSynchronizer.md"}'),s={name:"serverSide/AQS-AbstraactQueuedSynchronizer.md"},n=e("p",null,[c("依靠队列和状态值（int）来决定锁分配问题 如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是AQS同步队列的抽象表现。它将要请求共享资源的线程及自身的等待状态封装成队列的结点对象(Node）通过CAS、自旋以及LockSupport.park()的方式，维护state变量的状态，使并发达到同步的效果。"),e("img",{src:"https://pic.imgdb.cn/item/63e74ef84757feff336ca647.png",alt:"6f82efa5693764351e3bc79aed12670.png"})],-1),o=[n];function d(i,p,_,f,u,S){return r(),a("div",null,o)}const h=t(s,[["render",d]]);export{m as __pageData,h as default};
